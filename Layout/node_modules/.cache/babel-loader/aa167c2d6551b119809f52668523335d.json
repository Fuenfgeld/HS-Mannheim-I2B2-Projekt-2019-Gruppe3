{"ast":null,"code":"import { createCanvas, getMouseCoordinates, isCanvasSupported } from '../helpers/utils';\n\nfunction EventManager(chart) {\n  this.chart = chart;\n  this.lastObjectId = 0;\n\n  var _this = this;\n\n  this.objectMap = [];\n  this.rectangularRegionEventSubscriptions = [];\n  this.previousDataPointEventObject = null; //this.previousDataSeriesEventObject = null;\n\n  this.ghostCanvas = createCanvas(this.chart.width, this.chart.height); //this.ghostCanvas.width = this.chart.width;\n  //this.ghostCanvas.height = this.chart.height;\n\n  this.ghostCtx = this.ghostCanvas.getContext(\"2d\");\n\n  var eventHandler = function (ev) {\n    _this.mouseEventHandler.call(_this, ev);\n  };\n\n  this.mouseoveredObjectMaps = []; //this.chart.canvas.addEventListener(\"mouseover\", eventHandler);\n  //this.chart.canvas.addEventListener(\"mousemove\", eventHandler);\n  //this.chart.canvas.addEventListener(\"mouseout\", eventHandler);\n  //this.chart.canvas.addEventListener(\"click\", eventHandler);\n}\n\nEventManager.prototype.reset = function () {\n  this.lastObjectId = 0;\n  this.objectMap = [];\n  this.rectangularRegionEventSubscriptions = [];\n  this.previousDataPointEventObject = null;\n  this.eventObjects = []; //this.ghostCanvas.width = this.chart.width;\n  //this.ghostCanvas.height = this.chart.height;\n\n  if (isCanvasSupported) {\n    this.ghostCtx.clearRect(0, 0, this.chart.width, this.chart.height);\n    this.ghostCtx.beginPath();\n  }\n};\n\nEventManager.prototype.getNewObjectTrackingId = function () {\n  return ++this.lastObjectId;\n};\n\nEventManager.prototype.mouseEventHandler = function (ev) {\n  if (ev.type !== \"mousemove\" && ev.type !== \"click\") return;\n  var eventObjectMaps = [];\n  var xy = getMouseCoordinates(ev);\n  var id = null; //var dataPointInfo = this.chart.getDataPointAtXY(xy.x, xy.y, false);\n  //if (dataPointInfo) {\n  //\tid = dataPointInfo.dataSeries.dataPointIds[dataPointInfo.dataPointIndex];\n  //} else if (isCanvasSupported) {//IE9+\n  //\tid = getObjectId(xy.x, xy.y, this.ghostCtx);\n  //}\n\n  id = this.chart.getObjectAtXY(xy.x, xy.y, false);\n\n  if (id && typeof this.objectMap[id] !== \"undefined\") {\n    var eventObjectMap = this.objectMap[id];\n\n    if (eventObjectMap.objectType === \"dataPoint\") {\n      var dataSeries = this.chart.data[eventObjectMap.dataSeriesIndex];\n      var dataPoint = dataSeries.dataPoints[eventObjectMap.dataPointIndex];\n      var dataPointIndex = eventObjectMap.dataPointIndex; //Event Parameter should not contain reference to dataSeries directly. But to its options.\n\n      eventObjectMap.eventParameter = {\n        x: xy.x,\n        y: xy.y,\n        dataPoint: dataPoint,\n        dataSeries: dataSeries._options,\n        dataPointIndex: dataPointIndex,\n        dataSeriesIndex: dataSeries.index,\n        chart: this.chart._publicChartReference\n      };\n      eventObjectMap.eventContext = {\n        context: dataPoint,\n        userContext: dataPoint,\n        mouseover: \"mouseover\",\n        mousemove: \"mousemove\",\n        mouseout: \"mouseout\",\n        click: \"click\"\n      };\n      eventObjectMaps.push(eventObjectMap); //Add Dataseries too because mouse event on dataPoint also means there is an event on dataSeries. DataSeries is not present on ghost canvas\n\n      eventObjectMap = this.objectMap[dataSeries.id]; //Event Parameter should not contain reference to dataSeries directly. But to its options.\n\n      eventObjectMap.eventParameter = {\n        x: xy.x,\n        y: xy.y,\n        dataPoint: dataPoint,\n        dataSeries: dataSeries._options,\n        dataPointIndex: dataPointIndex,\n        dataSeriesIndex: dataSeries.index,\n        chart: this.chart._publicChartReference\n      };\n      eventObjectMap.eventContext = {\n        context: dataSeries,\n        userContext: dataSeries._options,\n        mouseover: \"mouseover\",\n        mousemove: \"mousemove\",\n        mouseout: \"mouseout\",\n        click: \"click\"\n      };\n      eventObjectMaps.push(this.objectMap[dataSeries.id]);\n    } //else if (eventObjectMap.objectType === \"stripLine\") {\n    //\t//Event Parameter should not contain reference to stripLine directly. But to its options.\n    //\teventObjectMap.eventParameter = { x: xy.x, y: xy.y, stripLine: eventObjectMap.stripLine._options, axis: eventObjectMap.axis._options, stripLineIndex: eventObjectMap.stripLineIndex };\n    //\teventObjectMap.eventContext = { context: eventObjectMap.stripLine, userContext: eventObjectMap.stripLine._options, mouseover: \"mouseover\", mousemove: \"mousemove\", mouseout: \"mouseout\", click: \"click\" };\n    //\teventObjectMaps.push(eventObjectMap);\n    //}\n    else if (eventObjectMap.objectType === \"legendItem\") {\n        var dataSeries = this.chart.data[eventObjectMap.dataSeriesIndex];\n        var dataPoint = eventObjectMap.dataPointIndex !== null ? dataSeries.dataPoints[eventObjectMap.dataPointIndex] : null; //Event Parameter should not contain reference to DataSeries directly. But to its options.\n\n        eventObjectMap.eventParameter = {\n          x: xy.x,\n          y: xy.y,\n          dataSeries: dataSeries._options,\n          dataPoint: dataPoint,\n          dataPointIndex: eventObjectMap.dataPointIndex,\n          dataSeriesIndex: eventObjectMap.dataSeriesIndex,\n          chart: this.chart._publicChartReference\n        };\n        eventObjectMap.eventContext = {\n          context: this.chart.legend,\n          userContext: this.chart.legend._options,\n          mouseover: \"itemmouseover\",\n          mousemove: \"itemmousemove\",\n          mouseout: \"itemmouseout\",\n          click: \"itemclick\"\n        };\n        eventObjectMaps.push(eventObjectMap);\n      }\n  } //Fire mouseout if existing mouseovered objects are not present in the objectmap.\n\n\n  var mouseOutObjectMapsExcluded = [];\n\n  for (var i = 0; i < this.mouseoveredObjectMaps.length; i++) {\n    var mouseOut = true;\n\n    for (var j = 0; j < eventObjectMaps.length; j++) {\n      if (eventObjectMaps[j].id === this.mouseoveredObjectMaps[i].id) {\n        mouseOut = false;\n        break;\n      }\n    }\n\n    if (mouseOut) {\n      this.fireEvent(this.mouseoveredObjectMaps[i], \"mouseout\", ev);\n    } else {\n      mouseOutObjectMapsExcluded.push(this.mouseoveredObjectMaps[i]);\n    }\n  }\n\n  this.mouseoveredObjectMaps = mouseOutObjectMapsExcluded; //Process new eventObectMaps\n  //If they already don't exist, add them and fire mouseover\n  //If ev.type is mousemove, then just fire mousemove\n  //If ev.type is click, then fire two events - click followed by mousemove\n\n  for (var i = 0; i < eventObjectMaps.length; i++) {\n    var existing = false;\n\n    for (var j = 0; j < this.mouseoveredObjectMaps.length; j++) {\n      if (eventObjectMaps[i].id === this.mouseoveredObjectMaps[j].id) {\n        existing = true;\n        break;\n      }\n    }\n\n    if (!existing) {\n      this.fireEvent(eventObjectMaps[i], \"mouseover\", ev);\n      this.mouseoveredObjectMaps.push(eventObjectMaps[i]);\n    }\n\n    if (ev.type === \"click\") {\n      this.fireEvent(eventObjectMaps[i], \"click\", ev);\n    } else if (ev.type === \"mousemove\") {\n      this.fireEvent(eventObjectMaps[i], \"mousemove\", ev);\n    }\n  }\n};\n\nEventManager.prototype.fireEvent = function (eventObjectMap, eventType, ev) {\n  if (!eventObjectMap || !eventType) return;\n  var eventParameter = eventObjectMap.eventParameter;\n  var eventContext = eventObjectMap.eventContext; //var context = eventObjectMap.eventContext.context;\n\n  var userContext = eventObjectMap.eventContext.userContext;\n  if (userContext && eventContext && userContext[eventContext[eventType]]) userContext[eventContext[eventType]].call(userContext, eventParameter);\n\n  if (eventType !== \"mouseout\") {\n    if (userContext.cursor && userContext.cursor !== ev.target.style.cursor) {\n      ev.target.style.cursor = userContext.cursor;\n    }\n  } else {\n    ev.target.style.cursor = this.chart._defaultCursor;\n    delete eventObjectMap.eventParameter; // reference no longer required.\n\n    delete eventObjectMap.eventContext; // reference no longer required.\n  } //This is just a quick fix. Need to find a better way of calling internal event handlers.\n\n\n  if (eventType === \"click\" && eventObjectMap.objectType === \"dataPoint\" && this.chart.pieDoughnutClickHandler) {\n    this.chart.pieDoughnutClickHandler.call(this.chart.data[eventObjectMap.dataSeriesIndex], eventParameter);\n  }\n};\n\nexport default EventManager;","map":null,"metadata":{},"sourceType":"module"}