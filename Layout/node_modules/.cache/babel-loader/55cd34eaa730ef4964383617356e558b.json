{"ast":null,"code":"import AnimationHelper from '../helpers/animator';\nimport RenderHelper from '../helpers/render';\nimport CanvasJSObject from './canvasjs';\nimport { extend, isCanvasSupported, getObjectId, drawRect, drawSegment } from '../helpers/utils';\n\nfunction ToolTip(chart, options, theme) {\n  ToolTip.base.constructor.call(this, \"ToolTip\", options, theme);\n  this.chart = chart;\n  this.canvas = chart.canvas;\n  this.ctx = this.chart.ctx;\n  this.currentSeriesIndex = -1;\n  this.currentDataPointIndex = -1;\n  this._timerId = 0;\n  this._prevX = NaN;\n  this._prevY = NaN;\n\n  this._initialize();\n}\n\nextend(ToolTip, CanvasJSObject);\n\nToolTip.prototype._initialize = function () {\n  if (this.enabled) {\n    this.container = document.createElement(\"div\");\n    this.container.setAttribute(\"class\", \"canvasjs-chart-tooltip\");\n    this.container.style.position = \"absolute\";\n    this.container.style.height = \"auto\";\n    this.container.style.boxShadow = \"1px 1px 2px 2px rgba(0,0,0,0.1)\";\n    this.container.style.zIndex = \"1000\"; //this.container.style.pointerEvents = \"none\";\n\n    this.container.style.display = \"none\"; //this.container.style.whiteSpace = \"no-wrap\";\n\n    var toolTipHtml = \"<div style=\\\" width: auto;\";\n    toolTipHtml += \"height: auto;\";\n    toolTipHtml += \"min-width: 50px;\";\n    toolTipHtml += \"line-height: auto;\";\n    toolTipHtml += \"margin: 0px 0px 0px 0px;\";\n    toolTipHtml += \"padding: 5px;\";\n    toolTipHtml += \"font-family: Calibri, Arial, Georgia, serif;\";\n    toolTipHtml += \"font-weight: normal;\";\n    toolTipHtml += \"font-style: \" + (isCanvasSupported ? \"italic;\" : \"normal;\");\n    toolTipHtml += \"font-size: 14px;\";\n    toolTipHtml += \"color: #000000;\";\n    toolTipHtml += \"text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);\";\n    toolTipHtml += \"text-align: left;\";\n    toolTipHtml += \"border: 2px solid gray;\"; //Older browsers like IE8- don't support alpha values\n\n    toolTipHtml += isCanvasSupported ? \"background: rgba(255,255,255,.9);\" : \"background: rgb(255,255,255);\";\n    toolTipHtml += \"text-indent: 0px;\";\n    toolTipHtml += \"white-space: nowrap;\"; //toolTipHtml += \"pointer-events:none;\";\n\n    toolTipHtml += \"border-radius: 5px;\"; //Disable Text Selection\n\n    toolTipHtml += \"-moz-user-select:none;\";\n    toolTipHtml += \"-khtml-user-select: none;\";\n    toolTipHtml += \"-webkit-user-select: none;\";\n    toolTipHtml += \"-ms-user-select: none;\";\n    toolTipHtml += \"user-select: none;\"; //toolTipHtml += \"opacity: 0;\";\n    //toolTipHtml += \"filter: progid: DXImageTransform.Microsoft.gradient(GradientType = 0, startColorstr = '#4cffffff', endColorstr = '#4cffffff');\";\n\n    if (!isCanvasSupported) {\n      //toolTipHtml += \"-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=90)'\";\n      //-ms-filter: \"progid:DXImageTransform.Microsoft.Shadow(Strength=4, Direction=135, Color='#000000')\";\n\n      /* For IE 5.5 - 7 */\n      toolTipHtml += \"filter: alpha(opacity = 90);\";\n      toolTipHtml += \"filter: progid:DXImageTransform.Microsoft.Shadow(Strength=3, Direction=135, Color='#666666');\";\n    }\n\n    toolTipHtml += \"} \\\"> Sample Tooltip</div>\";\n    this.container.innerHTML = toolTipHtml;\n    this.contentDiv = this.container.firstChild;\n    this.container.style.borderRadius = this.contentDiv.style.borderRadius;\n\n    this.chart._canvasJSContainer.appendChild(this.container);\n  }\n};\n\nToolTip.prototype.mouseMoveHandler = function (x, y) {\n  if (!(this._lastUpdated && new Date().getTime() - this._lastUpdated < 40)) {\n    this._lastUpdated = new Date().getTime();\n\n    this._updateToolTip(x, y);\n  }\n};\n\nToolTip.prototype._updateToolTip = function (mouseX, mouseY) {\n  //return;\n  if (this.chart.disableToolTip) // Disabled during animation, etc\n    return;\n\n  if (typeof mouseX === \"undefined\" || typeof mouseY === \"undefined\") {\n    if (isNaN(this._prevX) || isNaN(this._prevY)) return;else {\n      mouseX = this._prevX;\n      mouseY = this._prevY;\n    }\n  } else {\n    this._prevX = mouseX;\n    this._prevY = mouseY;\n  }\n\n  var dataPoint = null;\n  var dataSeries = null;\n  var toolTipContent = \"\";\n  var entries = [];\n  var toolTipRight;\n  var toolTipBottom;\n  var x = 0;\n\n  if (this.shared && this.enabled && this.chart.plotInfo.axisPlacement !== \"none\") {\n    // && this.chart.plotInfo.axisPlacement !== \"none\"\n    if (this.chart.plotInfo.axisPlacement === \"xySwapped\") {\n      x = (this.chart.axisX.viewportMaximum - this.chart.axisX.viewportMinimum) / this.chart.axisX.lineCoordinates.height * (this.chart.axisX.lineCoordinates.y2 - mouseY) + this.chart.axisX.viewportMinimum;\n    } else {\n      x = (this.chart.axisX.viewportMaximum - this.chart.axisX.viewportMinimum) / this.chart.axisX.lineCoordinates.width * (mouseX - this.chart.axisX.lineCoordinates.x1) + this.chart.axisX.viewportMinimum;\n    }\n\n    var nearbyEntries = [];\n\n    for (var i = 0; i < this.chart.data.length; i++) {\n      var entry = this.chart.data[i].getDataPointAtX(x, true);\n\n      if (entry && entry.index >= 0) {\n        entry.dataSeries = this.chart.data[i];\n        if (entry.dataPoint.y !== null) nearbyEntries.push(entry);\n      }\n    }\n\n    if (nearbyEntries.length === 0) return;\n    nearbyEntries.sort(function (entry1, entry2) {\n      return entry1.distance - entry2.distance;\n    });\n    var closest = nearbyEntries[0];\n\n    for (i = 0; i < nearbyEntries.length; i++) {\n      if (nearbyEntries[i].dataPoint.x.valueOf() === closest.dataPoint.x.valueOf()) entries.push(nearbyEntries[i]);\n    }\n\n    nearbyEntries = null;\n  } else {\n    var dataPointInfo = this.chart.getDataPointAtXY(mouseX, mouseY, true); //dataPointInfo = null;\n\n    if (dataPointInfo) {\n      this.currentDataPointIndex = dataPointInfo.dataPointIndex;\n      this.currentSeriesIndex = dataPointInfo.dataSeries.index;\n    } else if (isCanvasSupported) {\n      var id = getObjectId(mouseX, mouseY, this.chart._eventManager.ghostCtx);\n\n      if (id > 0 && typeof this.chart._eventManager.objectMap[id] !== \"undefined\") {\n        //DataPoint/DataSeries event\n        var eventObject = this.chart._eventManager.objectMap[id];\n        if (eventObject.objectType === \"legendItem\") return; //if (this.currentSeriesIndex === eventObject.dataSeriesIndex && this.currentDataPointIndex === eventObject.dataPointIndex)\n        //  return;\n        //else {\n\n        this.currentSeriesIndex = eventObject.dataSeriesIndex;\n        this.currentDataPointIndex = eventObject.dataPointIndex >= 0 ? eventObject.dataPointIndex : -1; //}\n        //window.console.log(\"id: \" + id + \"; hex: \" + intToHexColorString(id));\n      } else this.currentDataPointIndex = -1;\n    } else this.currentDataPointIndex = -1;\n\n    if (this.currentSeriesIndex >= 0) {\n      dataSeries = this.chart.data[this.currentSeriesIndex];\n      var entry = {};\n\n      if (this.currentDataPointIndex >= 0) {\n        dataPoint = dataSeries.dataPoints[this.currentDataPointIndex];\n        entry.dataSeries = dataSeries;\n        entry.dataPoint = dataPoint;\n        entry.index = this.currentDataPointIndex;\n        entry.distance = Math.abs(dataPoint.x - x);\n      } else if (this.enabled && (dataSeries.type === \"line\" || dataSeries.type === \"stepLine\" || dataSeries.type === \"spline\" || dataSeries.type === \"area\" || dataSeries.type === \"stepArea\" || dataSeries.type === \"splineArea\" || dataSeries.type === \"stackedArea\" || dataSeries.type === \"stackedArea100\" || dataSeries.type === \"rangeArea\" || dataSeries.type === \"rangeSplineArea\" || dataSeries.type === \"candlestick\" || dataSeries.type === \"ohlc\")) {\n        //var x = (this.chart.axisX.viewportMaximum - this.chart.axisX.viewportMinimum) / this.chart.axisX.lineCoordinates.width * (mouseX - this.chart.axisX.lineCoordinates.x1) + this.chart.axisX.viewportMinimum.valueOf();\n        var x = dataSeries.axisX.conversionParameters.minimum + (mouseX - dataSeries.axisX.conversionParameters.reference) / dataSeries.axisX.conversionParameters.pixelPerUnit;\n        entry = dataSeries.getDataPointAtX(x, true);\n        entry.dataSeries = dataSeries;\n        this.currentDataPointIndex = entry.index;\n        dataPoint = entry.dataPoint;\n      } else {\n        //this.hide();\n        return;\n      }\n\n      if (entry.dataPoint.y !== null) {\n        if (entry.dataSeries.axisY) {\n          if (entry.dataPoint.y.length > 0) {\n            var unboundToViewport = 0;\n\n            for (var i = 0; i < entry.dataPoint.y.length; i++) if (entry.dataPoint.y[i] < entry.dataSeries.axisY.viewportMinimum) unboundToViewport--;else if (entry.dataPoint.y[i] > entry.dataSeries.axisY.viewportMaximum) unboundToViewport++;\n\n            if (unboundToViewport < entry.dataPoint.y.length && unboundToViewport > -entry.dataPoint.y.length) entries.push(entry);\n          } else {\n            if (entry.dataPoint.y >= entry.dataSeries.axisY.viewportMinimum && entry.dataPoint.y <= entry.dataSeries.axisY.viewportMaximum) entries.push(entry);\n          }\n        } else entries.push(entry);\n      }\n    }\n  }\n\n  if (entries.length > 0) {\n    this.highlightObjects(entries);\n\n    if (this.enabled) {\n      var toolTipInnerHtml = \"\";\n      toolTipInnerHtml = this.getToolTipInnerHTML({\n        entries: entries\n      });\n\n      if (toolTipInnerHtml !== null) {\n        this.contentDiv.innerHTML = toolTipInnerHtml;\n        this.contentDiv.innerHTML = toolTipInnerHtml;\n        var previouslyHidden = false;\n\n        if (this.container.style.display === \"none\") {\n          previouslyHidden = true;\n          this.container.style.display = \"block\";\n        }\n\n        try {\n          this.contentDiv.style.background = this.backgroundColor ? this.backgroundColor : isCanvasSupported ? \"rgba(255,255,255,.9)\" : \"rgb(255,255,255)\";\n          this.contentDiv.style.borderRightColor = this.contentDiv.style.borderLeftColor = this.contentDiv.style.borderColor = this.borderColor ? this.borderColor : entries[0].dataPoint.color ? entries[0].dataPoint.color : entries[0].dataSeries.color ? entries[0].dataSeries.color : entries[0].dataSeries._colorSet[entries[0].index % entries[0].dataSeries._colorSet.length];\n          this.contentDiv.style.borderWidth = this.borderThickness || this.borderThickness === 0 ? this.borderThickness + \"px\" : 2 + \"px\";\n          this.contentDiv.style.borderRadius = this.cornerRadius || this.cornerRadius === 0 ? this.cornerRadius + \"px\" : 5 + \"px\";\n          this.container.style.borderRadius = this.contentDiv.style.borderRadius;\n          this.contentDiv.style.fontSize = this.fontSize || this.fontSize === 0 ? this.fontSize + \"px\" : 14 + \"px\";\n          this.contentDiv.style.color = this.fontColor ? this.fontColor : \"#000000\";\n          this.contentDiv.style.fontFamily = this.fontFamily ? this.fontFamily : \"Calibri, Arial, Georgia, serif;\";\n          this.contentDiv.style.fontWeight = this.fontWeight ? this.fontWeight : \"normal\";\n          this.contentDiv.style.fontStyle = this.fontStyle ? this.fontStyle : isCanvasSupported ? \"italic\" : \"normal\";\n        } catch (e) {}\n\n        var toolTipLeft;\n\n        if (entries[0].dataSeries.type === \"pie\" || entries[0].dataSeries.type === \"doughnut\" || entries[0].dataSeries.type === \"funnel\" || entries[0].dataSeries.type === \"bar\" || entries[0].dataSeries.type === \"rangeBar\" || entries[0].dataSeries.type === \"stackedBar\" || entries[0].dataSeries.type === \"stackedBar100\") {\n          toolTipLeft = mouseX - 10 - this.container.clientWidth;\n        } else {\n          //toolTipLeft = (((this.chart.axisX.lineCoordinates.width / Math.abs(this.chart.axisX.viewportMaximum - this.chart.axisX.viewportMinimum)) * Math.abs(entries[0].dataPoint.x - this.chart.axisX.viewportMinimum)) + this.chart.axisX.lineCoordinates.x1 + .5) - this.container.clientWidth << 0;\n          toolTipLeft = entries[0].dataSeries.axisX.conversionParameters.reference + entries[0].dataSeries.axisX.conversionParameters.pixelPerUnit * (entries[0].dataPoint.x - entries[0].dataSeries.axisX.conversionParameters.minimum) - this.container.clientWidth << 0;\n          toolTipLeft -= 10;\n        }\n\n        if (toolTipLeft < 0) {\n          toolTipLeft += this.container.clientWidth + 20;\n        }\n\n        if (toolTipLeft + this.container.clientWidth > this.chart._container.clientWidth) toolTipLeft = Math.max(0, this.chart._container.clientWidth - this.container.clientWidth);\n        toolTipLeft += \"px\";\n\n        if (entries.length === 1 && !this.shared && (entries[0].dataSeries.type === \"line\" || entries[0].dataSeries.type === \"stepLine\" || entries[0].dataSeries.type === \"spline\" || entries[0].dataSeries.type === \"area\" || entries[0].dataSeries.type === \"stepArea\" || entries[0].dataSeries.type === \"splineArea\" || entries[0].dataSeries.type === \"stackedArea\" || entries[0].dataSeries.type === \"stackedArea100\")) {\n          //toolTipBottom = (entries[0].dataSeries.axisY.lineCoordinates.y2 - entries[0].dataSeries.axisY.lineCoordinates.height / Math.abs(entries[0].dataSeries.axisY.maximum - entries[0].dataSeries.axisY.viewportMinimum) * Math.abs(entries[0].dataPoint.y - entries[0].dataSeries.axisY.viewportMinimum) + .5) << 0;\n          toolTipBottom = entries[0].dataSeries.axisY.conversionParameters.reference + entries[0].dataSeries.axisY.conversionParameters.pixelPerUnit * (entries[0].dataPoint.y - entries[0].dataSeries.axisY.viewportMinimum) + .5 << 0;\n        } else if (entries[0].dataSeries.type === \"bar\" || entries[0].dataSeries.type === \"rangeBar\" || entries[0].dataSeries.type === \"stackedBar\" || entries[0].dataSeries.type === \"stackedBar100\") {\n          //toolTipBottom = (entries[0].dataSeries.axisX.lineCoordinates.y2 - entries[0].dataSeries.axisX.lineCoordinates.height / Math.abs(entries[0].dataSeries.axisX.maximum - entries[0].dataSeries.axisX.viewportMinimum) * Math.abs(entries[0].dataPoint.x - entries[0].dataSeries.axisX.viewportMinimum) + .5) << 0;\n          toolTipBottom = entries[0].dataSeries.axisX.conversionParameters.reference + entries[0].dataSeries.axisX.conversionParameters.pixelPerUnit * (entries[0].dataPoint.x - entries[0].dataSeries.axisX.viewportMinimum) + .5 << 0;\n        } else {\n          toolTipBottom = mouseY;\n        }\n\n        toolTipBottom = -toolTipBottom + 10;\n\n        if (toolTipBottom + this.container.clientHeight + 5 > 0) {\n          toolTipBottom -= toolTipBottom + this.container.clientHeight + 5 - 0;\n        }\n\n        toolTipBottom += \"px\"; //this.container.style.right = toolTipRight;\n\n        this.container.style.left = toolTipLeft;\n        this.container.style.bottom = toolTipBottom;\n\n        if (!this.animationEnabled || previouslyHidden) {\n          this.disableAnimation();\n        } else this.enableAnimation();\n      } else {\n        this.hide(false);\n      }\n    } //if (isDebugMode)\n    //  console.log(\"searchX: \" + x + \" x: \" + searchResult.dataPoint.x + \"; y: \" + searchResult.dataPoint.y + \"; distance: \" + searchResult.distance + \"; steps: \" + steps);\n\n  }\n};\n\nToolTip.prototype.highlightObjects = function (entries) {\n  //if (!this.enabled)\n  //\treturn;\n  //this.chart.overlaidCanvasCtx.clearRect(0, 0, this.chart.overlaidCanvas.width, this.chart.overlaidCanvas.height);\n  var overlaidCanvasCtx = this.chart.overlaidCanvasCtx;\n  this.chart.resetOverlayedCanvas();\n  overlaidCanvasCtx.clearRect(0, 0, this.chart.width, this.chart.height);\n  overlaidCanvasCtx.save();\n  var plotArea = this.chart.plotArea;\n  var offset = 0;\n  overlaidCanvasCtx.rect(plotArea.x1, plotArea.y1, plotArea.x2 - plotArea.x1, plotArea.y2 - plotArea.y1);\n  overlaidCanvasCtx.clip();\n\n  for (var i = 0; i < entries.length; i++) {\n    var entry = entries[i];\n    var eventObject = this.chart._eventManager.objectMap[entry.dataSeries.dataPointIds[entry.index]];\n    if (!eventObject || !eventObject.objectType || eventObject.objectType !== \"dataPoint\") continue;\n    var dataSeries = this.chart.data[eventObject.dataSeriesIndex];\n    var dataPoint = dataSeries.dataPoints[eventObject.dataPointIndex];\n    var index = eventObject.dataPointIndex;\n\n    if (dataPoint.highlightEnabled !== false && (dataSeries.highlightEnabled === true || dataPoint.highlightEnabled === true)) {\n      if (dataSeries.type === \"line\" || dataSeries.type === \"stepLine\" || dataSeries.type === \"spline\" || dataSeries.type === \"scatter\" || dataSeries.type === \"area\" || dataSeries.type === \"stepArea\" || dataSeries.type === \"splineArea\" || dataSeries.type === \"stackedArea\" || dataSeries.type === \"stackedArea100\" || dataSeries.type === \"rangeArea\" || dataSeries.type === \"rangeSplineArea\") {\n        var markerProps = dataSeries.getMarkerProperties(index, eventObject.x1, eventObject.y1, this.chart.overlaidCanvasCtx);\n        markerProps.size = Math.max(markerProps.size * 1.5 << 0, 10);\n        markerProps.borderColor = markerProps.borderColor || \"#FFFFFF\";\n        markerProps.borderThickness = markerProps.borderThickness || Math.ceil(markerProps.size * .1); //overlaidCanvasCtx.globalAlpha = .8;\n\n        RenderHelper.drawMarkers([markerProps]); //overlaidCanvasCtx.globalAlpha = .8;\n\n        if (typeof eventObject.y2 !== \"undefined\") {\n          var markerProps = dataSeries.getMarkerProperties(index, eventObject.x1, eventObject.y2, this.chart.overlaidCanvasCtx);\n          markerProps.size = Math.max(markerProps.size * 1.5 << 0, 10);\n          markerProps.borderColor = markerProps.borderColor || \"#FFFFFF\";\n          markerProps.borderThickness = markerProps.borderThickness || Math.ceil(markerProps.size * .1); //overlaidCanvasCtx.globalAlpha = .8;\n\n          RenderHelper.drawMarkers([markerProps]); //overlaidCanvasCtx.globalAlpha = .8;\n        }\n      } else if (dataSeries.type === \"bubble\") {\n        var markerProps = dataSeries.getMarkerProperties(index, eventObject.x1, eventObject.y1, this.chart.overlaidCanvasCtx);\n        markerProps.size = eventObject.size;\n        markerProps.color = \"white\";\n        markerProps.borderColor = \"white\"; //markerProps.borderThickness = 2;\n\n        overlaidCanvasCtx.globalAlpha = .3;\n        RenderHelper.drawMarkers([markerProps]);\n        overlaidCanvasCtx.globalAlpha = 1;\n      } else if (dataSeries.type === \"column\" || dataSeries.type === \"stackedColumn\" || dataSeries.type === \"stackedColumn100\" || dataSeries.type === \"bar\" || dataSeries.type === \"rangeBar\" || dataSeries.type === \"stackedBar\" || dataSeries.type === \"stackedBar100\" || dataSeries.type === \"rangeColumn\") {\n        drawRect(overlaidCanvasCtx, eventObject.x1, eventObject.y1, eventObject.x2, eventObject.y2, \"white\", 0, null, false, false, false, false, .3);\n      } else if (dataSeries.type === \"pie\" || dataSeries.type === \"doughnut\") {\n        drawSegment(overlaidCanvasCtx, eventObject.center, eventObject.radius, \"white\", dataSeries.type, eventObject.startAngle, eventObject.endAngle, .3, eventObject.percentInnerRadius);\n      } else if (dataSeries.type === \"candlestick\") {\n        overlaidCanvasCtx.globalAlpha = 1;\n        overlaidCanvasCtx.strokeStyle = eventObject.color;\n        overlaidCanvasCtx.lineWidth = eventObject.borderThickness * 2;\n        offset = overlaidCanvasCtx.lineWidth % 2 === 0 ? 0 : .5;\n        overlaidCanvasCtx.beginPath();\n        overlaidCanvasCtx.moveTo(eventObject.x3 - offset, eventObject.y2);\n        overlaidCanvasCtx.lineTo(eventObject.x3 - offset, Math.min(eventObject.y1, eventObject.y4));\n        overlaidCanvasCtx.stroke();\n        overlaidCanvasCtx.beginPath();\n        overlaidCanvasCtx.moveTo(eventObject.x3 - offset, Math.max(eventObject.y1, eventObject.y4));\n        overlaidCanvasCtx.lineTo(eventObject.x3 - offset, eventObject.y3);\n        overlaidCanvasCtx.stroke();\n        drawRect(overlaidCanvasCtx, eventObject.x1, Math.min(eventObject.y1, eventObject.y4), eventObject.x2, Math.max(eventObject.y1, eventObject.y4), \"transparent\", eventObject.borderThickness * 2, eventObject.color, false, false, false, false);\n        overlaidCanvasCtx.globalAlpha = 1;\n      } else if (dataSeries.type === \"ohlc\") {\n        overlaidCanvasCtx.globalAlpha = 1;\n        overlaidCanvasCtx.strokeStyle = eventObject.color;\n        overlaidCanvasCtx.lineWidth = eventObject.borderThickness * 2;\n        offset = overlaidCanvasCtx.lineWidth % 2 === 0 ? 0 : .5;\n        overlaidCanvasCtx.beginPath();\n        overlaidCanvasCtx.moveTo(eventObject.x3 - offset, eventObject.y2);\n        overlaidCanvasCtx.lineTo(eventObject.x3 - offset, eventObject.y3);\n        overlaidCanvasCtx.stroke();\n        overlaidCanvasCtx.beginPath();\n        overlaidCanvasCtx.moveTo(eventObject.x3, eventObject.y1);\n        overlaidCanvasCtx.lineTo(eventObject.x1, eventObject.y1);\n        overlaidCanvasCtx.stroke();\n        overlaidCanvasCtx.beginPath();\n        overlaidCanvasCtx.moveTo(eventObject.x3, eventObject.y4);\n        overlaidCanvasCtx.lineTo(eventObject.x2, eventObject.y4);\n        overlaidCanvasCtx.stroke();\n        overlaidCanvasCtx.globalAlpha = 1;\n      }\n    }\n  }\n\n  overlaidCanvasCtx.restore();\n  overlaidCanvasCtx.globalAlpha = 1;\n  overlaidCanvasCtx.beginPath();\n  return;\n};\n\nToolTip.prototype.getToolTipInnerHTML = function (e) {\n  var entries = e.entries;\n  var toolTipInnerHtml = null;\n  var dataSeries = null;\n  var dataPoint = null;\n  var index = 0;\n  var color = null;\n  var toolTipContent = \"\";\n  var isToolTipDefinedInData = true;\n\n  for (var i = 0; i < entries.length; i++) {\n    if (entries[i].dataSeries.toolTipContent || entries[i].dataPoint.toolTipContent) {\n      isToolTipDefinedInData = false;\n      break;\n    }\n  }\n\n  if (isToolTipDefinedInData && (this.content && typeof this.content === \"function\" || this.contentFormatter)) {\n    var param = {\n      chart: this.chart,\n      toolTip: this._options,\n      entries: entries\n    };\n    toolTipInnerHtml = this.contentFormatter ? this.contentFormatter(param) : this.content(param);\n  } else {\n    if (this.shared && this.chart.plotInfo.axisPlacement !== \"none\") {\n      var toolTipInnerHtmlPrefix = \"\";\n\n      for (var i = 0; i < entries.length; i++) {\n        dataSeries = entries[i].dataSeries;\n        dataPoint = entries[i].dataPoint;\n        index = entries[i].index;\n        toolTipContent = \"\";\n\n        if (i === 0 && isToolTipDefinedInData && !this.content) {\n          toolTipInnerHtmlPrefix += typeof this.chart.axisX.labels[dataPoint.x] !== \"undefined\" ? this.chart.axisX.labels[dataPoint.x] : \"{x}\";\n          toolTipInnerHtmlPrefix += \"</br>\";\n          toolTipInnerHtmlPrefix = this.chart.replaceKeywordsWithValue(toolTipInnerHtmlPrefix, dataPoint, dataSeries, index);\n        } //Allows disabling of toolTip for individual dataPoints/dataSeries\n\n\n        if (dataPoint.toolTipContent === null || typeof dataPoint.toolTipContent === \"undefined\" && dataSeries._options.toolTipContent === null) continue;\n\n        if (dataSeries.type === \"line\" || dataSeries.type === \"stepLine\" || dataSeries.type === \"spline\" || dataSeries.type === \"area\" || dataSeries.type === \"stepArea\" || dataSeries.type === \"splineArea\" || dataSeries.type === \"column\" || dataSeries.type === \"bar\" || dataSeries.type === \"scatter\" || dataSeries.type === \"stackedColumn\" || dataSeries.type === \"stackedColumn100\" || dataSeries.type === \"stackedBar\" || dataSeries.type === \"stackedBar100\" || dataSeries.type === \"stackedArea\" || dataSeries.type === \"stackedArea100\") {\n          toolTipContent += dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"<span style='\\\"'color:{color};'\\\"'>{name}:</span>&nbsp;&nbsp;{y}\";\n        } else if (dataSeries.type === \"bubble\") {\n          toolTipContent += dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"<span style='\\\"'color:{color};'\\\"'>{name}:</span>&nbsp;&nbsp;{y}, &nbsp;&nbsp;{z}\";\n        } else if (dataSeries.type === \"pie\" || dataSeries.type === \"doughnut\" || dataSeries.type === \"funnel\") {\n          toolTipContent += dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"&nbsp;&nbsp;{y}\";\n        } else if (dataSeries.type === \"rangeColumn\" || dataSeries.type === \"rangeBar\" || dataSeries.type === \"rangeArea\" || dataSeries.type === \"rangeSplineArea\") {\n          toolTipContent += dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"<span style='\\\"'color:{color};'\\\"'>{name}:</span>&nbsp;&nbsp;{y[0]},&nbsp;{y[1]}\";\n        } else if (dataSeries.type === \"candlestick\" || dataSeries.type === \"ohlc\") {\n          toolTipContent += dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"<span style='\\\"'color:{color};'\\\"'>{name}:</span>\" + \"<br/>Open: &nbsp;&nbsp;{y[0]}\" + \"<br/>High: &nbsp;&nbsp;&nbsp;{y[1]}\" + \"<br/>Low:&nbsp;&nbsp;&nbsp;{y[2]}\" + \"<br/>Close: &nbsp;&nbsp;{y[3]}\";\n        }\n\n        if (toolTipInnerHtml === null) toolTipInnerHtml = \"\";\n\n        if (this.reversed === true) {\n          toolTipInnerHtml = this.chart.replaceKeywordsWithValue(toolTipContent, dataPoint, dataSeries, index) + toolTipInnerHtml;\n          if (i < entries.length - 1) toolTipInnerHtml = \"</br>\" + toolTipInnerHtml;\n        } else {\n          toolTipInnerHtml += this.chart.replaceKeywordsWithValue(toolTipContent, dataPoint, dataSeries, index);\n          if (i < entries.length - 1) toolTipInnerHtml += \"</br>\";\n        }\n      }\n\n      if (toolTipInnerHtml !== null) toolTipInnerHtml = toolTipInnerHtmlPrefix + toolTipInnerHtml;\n    } else {\n      dataSeries = entries[0].dataSeries;\n      dataPoint = entries[0].dataPoint;\n      index = entries[0].index; //Allows disabling of toolTip for individual dataPoints/dataSeries\n\n      if (dataPoint.toolTipContent === null || typeof dataPoint.toolTipContent === \"undefined\" && dataSeries._options.toolTipContent === null) return null;\n\n      if (dataSeries.type === \"line\" || dataSeries.type === \"stepLine\" || dataSeries.type === \"spline\" || dataSeries.type === \"area\" || dataSeries.type === \"stepArea\" || dataSeries.type === \"splineArea\" || dataSeries.type === \"column\" || dataSeries.type === \"bar\" || dataSeries.type === \"scatter\" || dataSeries.type === \"stackedColumn\" || dataSeries.type === \"stackedColumn100\" || dataSeries.type === \"stackedBar\" || dataSeries.type === \"stackedBar100\" || dataSeries.type === \"stackedArea\" || dataSeries.type === \"stackedArea100\") {\n        toolTipContent = dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"<span style='\\\"'color:{color};'\\\"'>\" + (dataPoint.label ? \"{label}\" : \"{x}\") + \" :</span>&nbsp;&nbsp;{y}\";\n      } else if (dataSeries.type === \"bubble\") {\n        toolTipContent = dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"<span style='\\\"'color:{color};'\\\"'>\" + (dataPoint.label ? \"{label}\" : \"{x}\") + \":</span>&nbsp;&nbsp;{y}, &nbsp;&nbsp;{z}\";\n      } else if (dataSeries.type === \"pie\" || dataSeries.type === \"doughnut\" || dataSeries.type === \"funnel\") {\n        toolTipContent = dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : (dataPoint.name ? \"{name}:&nbsp;&nbsp;\" : dataPoint.label ? \"{label}:&nbsp;&nbsp;\" : \"\") + \"{y}\";\n      } else if (dataSeries.type === \"rangeColumn\" || dataSeries.type === \"rangeBar\" || dataSeries.type === \"rangeArea\" || dataSeries.type === \"rangeSplineArea\") {\n        toolTipContent = dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"<span style='\\\"'color:{color};'\\\"'>\" + (dataPoint.label ? \"{label}\" : \"{x}\") + \" :</span>&nbsp;&nbsp;{y[0]}, &nbsp;{y[1]}\";\n      } else if (dataSeries.type === \"candlestick\" || dataSeries.type === \"ohlc\") {\n        toolTipContent = dataPoint.toolTipContent ? dataPoint.toolTipContent : dataSeries.toolTipContent ? dataSeries.toolTipContent : this.content && typeof this.content !== \"function\" ? this.content : \"<span style='\\\"'color:{color};'\\\"'>\" + (dataPoint.label ? \"{label}\" : \"{x}\") + \"</span>\" + \"<br/>Open: &nbsp;&nbsp;{y[0]}\" + \"<br/>High: &nbsp;&nbsp;&nbsp;{y[1]}\" + \"<br/>Low: &nbsp;&nbsp;&nbsp;&nbsp;{y[2]}\" + \"<br/>Close: &nbsp;&nbsp;{y[3]}\";\n      }\n\n      if (toolTipInnerHtml === null) toolTipInnerHtml = \"\";\n      toolTipInnerHtml += this.chart.replaceKeywordsWithValue(toolTipContent, dataPoint, dataSeries, index);\n    }\n  }\n\n  return toolTipInnerHtml;\n};\n\nToolTip.prototype.enableAnimation = function () {\n  if (this.container.style.WebkitTransition) return;\n  this.container.style.WebkitTransition = \"left .2s ease-out, bottom .2s ease-out\";\n  this.container.style.MozTransition = \"left .2s ease-out, bottom .2s ease-out\";\n  this.container.style.MsTransition = \"left .2s ease-out, bottom .2s ease-out\";\n  this.container.style.transition = \"left .2s ease-out, bottom .2s ease-out\";\n};\n\nToolTip.prototype.disableAnimation = function () {\n  if (!this.container.style.WebkitTransition) return;\n  this.container.style.WebkitTransition = \"\";\n  this.container.style.MozTransition = \"\";\n  this.container.style.MsTransition = \"\";\n  this.container.style.transition = \"\";\n};\n\nToolTip.prototype.hide = function (resetOverlayedCanvas) {\n  if (!this.enabled) return;\n  resetOverlayedCanvas = typeof resetOverlayedCanvas === \"undefined\" ? true : resetOverlayedCanvas;\n  this.container.style.display = \"none\";\n  this.currentSeriesIndex = -1;\n  this._prevX = NaN;\n  this._prevY = NaN; //this.chart.overlaidCanvasCtx.clearRect(0, 0, this.chart.overlaidCanvas.width, this.chart.overlaidCanvas.height);\n\n  if (resetOverlayedCanvas) this.chart.resetOverlayedCanvas();\n};\n\nexport default ToolTip;","map":null,"metadata":{},"sourceType":"module"}