{"ast":null,"code":"import { themes } from '../constants/themes';\nimport { isDebugMode, defaultOptions } from '../constants/options';\n\nfunction CanvasJSObject(defaultsKey, options, theme, parent) {\n  this._defaultsKey = defaultsKey;\n  this.parent = parent;\n  this._eventListeners = []; //Multidimentional array with an array for each event type\n\n  var currentThemeOptions = {};\n  if (theme && themes[theme] && themes[theme][defaultsKey]) currentThemeOptions = themes[theme][defaultsKey];\n  this._options = options ? options : {};\n  this.setOptions(this._options, currentThemeOptions);\n}\n\nCanvasJSObject.prototype.setOptions = function (options, currentThemeOptions) {\n  if (!defaultOptions[this._defaultsKey]) {\n    if (isDebugMode && window.console) console.log(\"defaults not set\");\n  } else {\n    var defaults = defaultOptions[this._defaultsKey];\n\n    for (var prop in defaults) {\n      if (defaults.hasOwnProperty(prop)) {\n        if (options && prop in options) this[prop] = options[prop];else if (currentThemeOptions && prop in currentThemeOptions) this[prop] = currentThemeOptions[prop];else this[prop] = defaults[prop]; //if (typeof this[prop] === \"function\") {\n        //    alert(\"function\");\n        //    this[prop] = this[prop]();\n        //}\n      }\n    }\n  }\n}; // Update options. Returns true if changed or else false\n\n\nCanvasJSObject.prototype.updateOption = function (prop) {\n  if (!defaultOptions[this._defaultsKey] && isDebugMode && window.console) console.log(\"defaults not set\");\n  var defaults = defaultOptions[this._defaultsKey];\n  var theme = this._options.theme ? this._options.theme : this.chart && this.chart._options.theme ? this.chart._options.theme : \"theme1\";\n  var currentThemeOptions = {};\n  var newValue = this[prop];\n  if (theme && themes[theme] && themes[theme][this._defaultsKey]) currentThemeOptions = themes[theme][this._defaultsKey];\n\n  if (prop in defaults) {\n    if (prop in this._options) newValue = this._options[prop];else if (currentThemeOptions && prop in currentThemeOptions) newValue = currentThemeOptions[prop];else newValue = defaults[prop];\n  }\n\n  if (newValue === this[prop]) return false;\n  this[prop] = newValue;\n  return true;\n}; //Stores values in _oldOptions so that it can be tracked for any changes\n\n\nCanvasJSObject.prototype.trackChanges = function (option) {\n  if (!this.sessionVariables) throw \"Session Variable Store not set\";\n  this.sessionVariables[option] = this._options[option];\n};\n\nCanvasJSObject.prototype.isBeingTracked = function (option) {\n  if (!this._options._oldOptions) this._options._oldOptions = {};\n  if (this._options._oldOptions[option]) return true;else return false;\n};\n\nCanvasJSObject.prototype.hasOptionChanged = function (option) {\n  if (!this.sessionVariables) throw \"Session Variable Store not set\";\n  var hasChanged = !(this.sessionVariables[option] === this._options[option]);\n  return hasChanged;\n};\n\nCanvasJSObject.prototype.addEventListener = function (eventName, eventHandler, context) {\n  if (!eventName || !eventHandler) return;\n  context = context || this;\n  this._eventListeners[eventName] = this._eventListeners[eventName] || [];\n\n  this._eventListeners[eventName].push({\n    context: context,\n    eventHandler: eventHandler\n  });\n};\n\nCanvasJSObject.prototype.removeEventListener = function (eventName, eventHandler) {\n  if (!eventName || !eventHandler || !this._eventListeners[eventName]) return;\n  var listeners = this._eventListeners[eventName];\n\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i].eventHandler === eventHandler) {\n      listeners[i].splice(i, 1);\n      break;\n    }\n  }\n};\n\nCanvasJSObject.prototype.removeAllEventListeners = function () {\n  this._eventListeners = [];\n};\n\nCanvasJSObject.prototype.dispatchEvent = function (eventName, eventParameter, context) {\n  //For Internal Events\n  if (eventName && this._eventListeners[eventName]) {\n    eventParameter = eventParameter || {};\n    var listeners = this._eventListeners[eventName];\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i].eventHandler.call(listeners[i].context, eventParameter);\n    }\n  } //External Events do not require registering as the property name is suffient to fire the event.\n\n\n  if (typeof this[eventName] === \"function\") {\n    this[eventName].call(context || this.chart._publicChartReference, eventParameter);\n  }\n};\n\nexport default CanvasJSObject;","map":null,"metadata":{},"sourceType":"module"}