{"ast":null,"code":"var _jsxFileName = \"/Users/nebe/Documents/GitHub/HS-Mannheim-I2B2-Projekt-2019-Gruppe3/Layout/src/components/ChartExports.js\";\nimport React, { PureComponent } from \"react\";\n\nconst makeCSVCell = value => value || value === 0 ? \"\\\"\".concat(value.toString().replace(/\"/g, \"\\\"\\\"\"), \"\\\"\") : \"\";\n\nconst makeCSVExport = data => {\n  const csvEntries = Object.keys(data).map(key => \"\".concat(makeCSVCell(key), \",\").concat(makeCSVCell(data[key])));\n  const csvContent = [\"Key,Value\"].concat(csvEntries).join(\"\\n\");\n  return \"data:text/csv;charset=utf-8;base64,\".concat(btoa(csvContent));\n};\n\nconst makePNGExport = imageSrc => new Promise(resolve => {\n  const canvas = document.createElement(\"canvas\");\n  const size = 800;\n  const padding = 100;\n  canvas.width = size;\n  canvas.height = size;\n  const image = new Image();\n\n  image.onload = () => {\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, size, size);\n    context.drawImage(image, 0, 0, size, size, padding, padding, size - padding * 2, size - padding * 2);\n    resolve(canvas.toDataURL(\"image/png\"));\n  };\n\n  image.src = imageSrc;\n});\n\nconst makeSVGExport = svg => {\n  const svgContent = new XMLSerializer().serializeToString(svg);\n  return \"data:image/svg+xml;base64,\".concat(btoa(svgContent));\n};\n\nconst ChartExport = ({\n  ext,\n  href,\n  tabIndex\n}) => React.createElement(\"a\", {\n  href: href,\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n  download: \"chart.\".concat(ext),\n  tabIndex: tabIndex,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}, \"Export .\", ext);\n\nconst ChartExportTrigger = ({\n  open\n}) => {\n  if (open) {\n    return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n      x1: \"4\",\n      y1: \"4\",\n      x2: \"12\",\n      y2: \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"line\", {\n      x1: \"12\",\n      y1: \"4\",\n      x2: \"4\",\n      y2: \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M 8, 3.4 m -1.3, 0 a 1.3, 1.3 0 1, 0 2.6, 0 a 1.3, 1.3 0 1, 0 -2.6, 0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"path\", {\n    d: \"M 8, 8 m -1.3, 0 a 1.3, 1.3 0 1, 0 2.6, 0 a 1.3, 1.3 0 1, 0 -2.6, 0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"path\", {\n    d: \"M 8, 12.6 m -1.3, 0 a 1.3, 1.3 0 1, 0 2.6, 0 a 1.3, 1.3 0 1, 0 -2.6, 0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n};\n\nclass ChartExports extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      csvExport: \"#\",\n      dropdownOpen: false,\n      pngExport: \"#\",\n      svgExport: \"#\"\n    };\n    this.handleToggleDropdown = this.handleToggleDropdown.bind(this);\n  }\n\n  componentDidMount() {\n    this.componentIsMounted = true;\n    this.makeExports();\n  }\n\n  componentDidUpdate(prevProps) {\n    const _this$props = this.props,\n          data = _this$props.data,\n          hovering = _this$props.hovering;\n    const dropdownOpen = this.state.dropdownOpen;\n\n    if (data !== prevProps.data) {\n      this.makeExports();\n    }\n\n    if (hovering !== prevProps.hovering && !hovering && dropdownOpen) {\n      this.setState({\n        dropdownOpen: false\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.componentIsMounted = false;\n  }\n\n  makeExports() {\n    setTimeout(() => {\n      if (!this.componentIsMounted) {\n        return;\n      }\n\n      const _this$props2 = this.props,\n            data = _this$props2.data,\n            svgRef = _this$props2.svgRef;\n      const csvExport = makeCSVExport(data);\n      const svgExport = makeSVGExport(svgRef.current);\n      makePNGExport(svgExport).then(pngExport => {\n        if (this.componentIsMounted) {\n          this.setState({\n            csvExport,\n            pngExport,\n            svgExport\n          });\n        }\n      });\n    }, 2000);\n  }\n\n  handleToggleDropdown() {\n    this.setState(({\n      dropdownOpen\n    }) => ({\n      dropdownOpen: !dropdownOpen\n    }));\n  }\n\n  render() {\n    const hovering = this.props.hovering;\n    const _this$state = this.state,\n          csvExport = _this$state.csvExport,\n          dropdownOpen = _this$state.dropdownOpen,\n          pngExport = _this$state.pngExport,\n          svgExport = _this$state.svgExport;\n    return React.createElement(\"div\", {\n      className: \"chq-charts--export\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleToggleDropdown,\n      \"aria-label\": \"Open dropdown\",\n      tabIndex: hovering ? 0 : -1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      viewBox: \"0 0 16 16\",\n      className: \"chq-charts--export-trigger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(ChartExportTrigger, {\n      open: dropdownOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))), dropdownOpen && React.createElement(\"div\", {\n      className: \"chq-charts--export-dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(ChartExport, {\n      ext: \"csv\",\n      href: csvExport,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(ChartExport, {\n      ext: \"png\",\n      href: pngExport,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(ChartExport, {\n      ext: \"svg\",\n      href: svgExport,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ChartExports;","map":{"version":3,"sources":["/Users/nebe/Documents/GitHub/HS-Mannheim-I2B2-Projekt-2019-Gruppe3/Layout/src/components/ChartExports.js"],"names":["React","PureComponent","makeCSVCell","value","toString","replace","makeCSVExport","data","csvEntries","Object","keys","map","key","csvContent","concat","join","btoa","makePNGExport","imageSrc","Promise","resolve","canvas","document","createElement","size","padding","width","height","image","Image","onload","context","getContext","fillStyle","fillRect","drawImage","toDataURL","src","makeSVGExport","svg","svgContent","XMLSerializer","serializeToString","ChartExport","ext","href","tabIndex","ChartExportTrigger","open","ChartExports","constructor","props","state","csvExport","dropdownOpen","pngExport","svgExport","handleToggleDropdown","bind","componentDidMount","componentIsMounted","makeExports","componentDidUpdate","prevProps","hovering","setState","componentWillUnmount","setTimeout","svgRef","current","then","render"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\n\nconst makeCSVCell = value => (\n  (value || value === 0) ? `\"${value.toString().replace(/\"/g, \"\\\"\\\"\")}\"` : \"\"\n);\n\nconst makeCSVExport = data => {\n  const csvEntries = Object.keys(data).map(key => (\n    `${makeCSVCell(key)},${makeCSVCell(data[key])}`\n  ));\n\n  const csvContent = [\"Key,Value\"].concat(csvEntries).join(\"\\n\");\n  return `data:text/csv;charset=utf-8;base64,${btoa(csvContent)}`;\n};\n\nconst makePNGExport = imageSrc => new Promise(resolve => {\n  const canvas = document.createElement(\"canvas\");\n\n  const size = 800;\n  const padding = 100;\n\n  canvas.width = size;\n  canvas.height = size;\n\n  const image = new Image();\n  image.onload = () => {\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n\n    context.fillRect(0, 0, size, size);\n    context.drawImage(\n      image, 0, 0, size, size,\n      padding, padding, size - padding * 2, size - padding * 2\n    );\n\n    resolve(canvas.toDataURL(\"image/png\"));\n  };\n  image.src = imageSrc;\n});\n\nconst makeSVGExport = svg => {\n  const svgContent = new XMLSerializer().serializeToString(svg);\n  return `data:image/svg+xml;base64,${btoa(svgContent)}`;\n};\n\nconst ChartExport = ({ ext, href, tabIndex }) => (\n  <a\n    href={href}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    download={`chart.${ext}`}\n    tabIndex={tabIndex}\n  >\n    Export .{ext}\n  </a>\n);\n\nconst ChartExportTrigger = ({ open }) => {\n  if (open) {\n    return (\n      <>\n        <line x1=\"4\" y1=\"4\" x2=\"12\" y2=\"12\" />\n        <line x1=\"12\" y1=\"4\" x2=\"4\" y2=\"12\" />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <path d=\"M 8, 3.4 m -1.3, 0 a 1.3, 1.3 0 1, 0 2.6, 0 a 1.3, 1.3 0 1, 0 -2.6, 0\" />\n      <path d=\"M 8, 8 m -1.3, 0 a 1.3, 1.3 0 1, 0 2.6, 0 a 1.3, 1.3 0 1, 0 -2.6, 0\" />\n      <path d=\"M 8, 12.6 m -1.3, 0 a 1.3, 1.3 0 1, 0 2.6, 0 a 1.3, 1.3 0 1, 0 -2.6, 0\" />\n    </>\n  );\n};\n\nclass ChartExports extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      csvExport: \"#\",\n      dropdownOpen: false,\n      pngExport: \"#\",\n      svgExport: \"#\"\n    };\n\n    this.handleToggleDropdown = this.handleToggleDropdown.bind(this);\n  }\n\n  componentDidMount() {\n    this.componentIsMounted = true;\n    this.makeExports();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data, hovering } = this.props;\n    const { dropdownOpen } = this.state;\n\n    if (data !== prevProps.data) {\n      this.makeExports();\n    }\n\n    if (hovering !== prevProps.hovering && !hovering && dropdownOpen) {\n      this.setState({ dropdownOpen: false });\n    }\n  }\n\n  componentWillUnmount() {\n    this.componentIsMounted = false;\n  }\n\n  makeExports() {\n    setTimeout(() => {\n      if (!this.componentIsMounted) {\n        return;\n      }\n\n      const { data, svgRef } = this.props;\n\n      const csvExport = makeCSVExport(data);\n      const svgExport = makeSVGExport(svgRef.current);\n\n      makePNGExport(svgExport).then(pngExport => {\n        if (this.componentIsMounted) {\n          this.setState({ csvExport, pngExport, svgExport });\n        }\n      });\n    }, 2000);\n  }\n\n  handleToggleDropdown() {\n    this.setState(({ dropdownOpen }) => ({\n      dropdownOpen: !dropdownOpen\n    }));\n  }\n\n  render() {\n    const { hovering } = this.props;\n    const { csvExport, dropdownOpen, pngExport, svgExport } = this.state;\n\n    return (\n      <div className=\"chq-charts--export\">\n        <button\n          type=\"button\"\n          onClick={this.handleToggleDropdown}\n          aria-label=\"Open dropdown\"\n          tabIndex={hovering ? 0 : -1}\n        >\n          <svg viewBox=\"0 0 16 16\" className=\"chq-charts--export-trigger\">\n            <ChartExportTrigger open={dropdownOpen} />\n          </svg>\n        </button>\n        {dropdownOpen && (\n          <div className=\"chq-charts--export-dropdown\">\n            <ChartExport ext=\"csv\" href={csvExport} />\n            <ChartExport ext=\"png\" href={pngExport} />\n            <ChartExport ext=\"svg\" href={svgExport} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ChartExports;\n"]},"metadata":{},"sourceType":"module"}