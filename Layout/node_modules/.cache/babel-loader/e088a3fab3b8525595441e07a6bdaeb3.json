{"ast":null,"code":"const RenderHelper = {\n  drawMarker: function (x, y, ctx, markerType, markerSize, markerColor, markerBorderColor, markerBorderThickness) {\n    if (!ctx) return;\n    var alpha = 1;\n    ctx.fillStyle = markerColor ? markerColor : \"#000000\";\n    ctx.strokeStyle = markerBorderColor ? markerBorderColor : \"#000000\";\n    ctx.lineWidth = markerBorderThickness ? markerBorderThickness : 0;\n\n    if (markerType === \"circle\") {\n      ctx.moveTo(x, y);\n      ctx.beginPath(); //return;\n\n      ctx.arc(x, y, markerSize / 2, 0, Math.PI * 2, false);\n      if (markerColor) ctx.fill();\n\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n    } else if (markerType === \"square\") {\n      //ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\n      ctx.beginPath();\n      ctx.rect(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize);\n      if (markerColor) ctx.fill();\n\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n    } else if (markerType === \"triangle\") {\n      ctx.beginPath();\n      ctx.moveTo(x - markerSize / 2, y + markerSize / 2);\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\n      ctx.lineTo(x, y - markerSize / 2);\n      ctx.closePath();\n      if (markerColor) ctx.fill();\n\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n\n      ctx.beginPath();\n    } else if (markerType === \"cross\") {\n      ctx.strokeStyle = markerColor;\n      markerBorderThickness = markerSize / 4;\n      ctx.lineWidth = markerBorderThickness;\n      ctx.beginPath();\n      ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\n      ctx.stroke();\n      ctx.moveTo(x + markerSize / 2, y - markerSize / 2);\n      ctx.lineTo(x - markerSize / 2, y + markerSize / 2);\n      ctx.stroke();\n    }\n  },\n  drawMarkers: function (markers) {\n    for (var i = 0; i < markers.length; i++) {\n      var marker = markers[i];\n      RenderHelper.drawMarker(marker.x, marker.y, marker.ctx, marker.type, marker.size, marker.color, marker.borderColor, marker.borderThickness);\n    }\n  } //,\n  //draw1pxLine: function (x1, y1, x2, y2, color, ctx) {\n  //\tctx.beginPath();\n  //\tctx.drawRect(x1, y1, x2 - x1, y2 - y1);\n  //\tctx.stroke();\n  //}\n\n};\nexport default RenderHelper;","map":null,"metadata":{},"sourceType":"module"}