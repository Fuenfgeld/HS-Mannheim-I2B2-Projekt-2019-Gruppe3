{"ast":null,"code":"import CanvasJSObject from './canvasjs';\nimport TextBlock from './text_block';\nimport { extend } from '../helpers/utils';\n\nfunction Title(chart, options) {\n  Title.base.constructor.call(this, \"Title\", options, chart.theme);\n  this.chart = chart;\n  this.canvas = chart.canvas;\n  this.ctx = this.chart.ctx;\n\n  if (typeof this._options.fontSize === \"undefined\") {\n    this.fontSize = this.chart.getAutoFontSize(this.fontSize); //window.console.log(\"Chart Title fontSize: \" + this.fontSize);\n  }\n\n  this.width = null, //read only\n  this.height = null; //read only\n\n  this.bounds = {\n    x1: null,\n    y1: null,\n    x2: null,\n    y2: null\n  };\n}\n\nextend(Title, CanvasJSObject);\n\nTitle.prototype.render = function () {\n  if (!this.text) return;\n  var container = !this.dockInsidePlotArea ? this.chart : this.chart.plotArea;\n  var freespace = container.layoutManager.getFreeSpace();\n  var left = freespace.x1;\n  var top = freespace.y1;\n  var angle = 0;\n  var maxHeight = 0;\n  var containerMargin = 2; //Margin towards the container\n\n  var rightOffset = this.chart._menuButton && this.chart.exportEnabled && this.verticalAlign === \"top\" ? 22 : 0; //So that Title doesn't overlap menu button.\n\n  var textBlockHorizontalAlign;\n  var position;\n\n  if (this.verticalAlign === \"top\" || this.verticalAlign === \"bottom\") {\n    if (this.maxWidth === null) this.maxWidth = freespace.width - containerMargin * 2 - rightOffset * (this.horizontalAlign === \"center\" ? 2 : 1);\n    maxHeight = freespace.height * .5 - this.margin - containerMargin;\n    angle = 0;\n  } else if (this.verticalAlign === \"center\") {\n    if (this.horizontalAlign === \"left\" || this.horizontalAlign === \"right\") {\n      if (this.maxWidth === null) this.maxWidth = freespace.height - containerMargin * 2;\n      maxHeight = freespace.width * .5 - this.margin - containerMargin;\n    } else if (this.horizontalAlign === \"center\") {\n      if (this.maxWidth === null) this.maxWidth = freespace.width - containerMargin * 2;\n      maxHeight = freespace.height * .5 - containerMargin * 2;\n    }\n  }\n\n  if (!this.wrap) maxHeight = Math.min(maxHeight, Math.max(this.fontSize * 1.5, this.fontSize + this.padding * 2.5)); //console.log(this.maxWidth);\n\n  var textBlock = new TextBlock(this.ctx, {\n    fontSize: this.fontSize,\n    fontFamily: this.fontFamily,\n    fontColor: this.fontColor,\n    fontStyle: this.fontStyle,\n    fontWeight: this.fontWeight,\n    horizontalAlign: this.horizontalAlign,\n    verticalAlign: this.verticalAlign,\n    borderColor: this.borderColor,\n    borderThickness: this.borderThickness,\n    backgroundColor: this.backgroundColor,\n    maxWidth: this.maxWidth,\n    maxHeight: maxHeight,\n    cornerRadius: this.cornerRadius,\n    text: this.text,\n    padding: this.padding,\n    textBaseline: \"top\"\n  });\n  var textBlockSize = textBlock.measureText();\n\n  if (this.verticalAlign === \"top\" || this.verticalAlign === \"bottom\") {\n    if (this.verticalAlign === \"top\") {\n      top = freespace.y1 + containerMargin;\n      position = \"top\";\n    } else if (this.verticalAlign === \"bottom\") {\n      top = freespace.y2 - containerMargin - textBlockSize.height;\n      position = \"bottom\";\n    }\n\n    if (this.horizontalAlign === \"left\") {\n      left = freespace.x1 + containerMargin;\n    } else if (this.horizontalAlign === \"center\") {\n      left = freespace.x1 + freespace.width / 2 - textBlockSize.width / 2;\n    } else if (this.horizontalAlign === \"right\") {\n      left = freespace.x2 - containerMargin - textBlockSize.width - rightOffset;\n    }\n\n    textBlockHorizontalAlign = this.horizontalAlign;\n    this.width = textBlockSize.width;\n    this.height = textBlockSize.height;\n  } else if (this.verticalAlign === \"center\") {\n    if (this.horizontalAlign === \"left\") {\n      left = freespace.x1 + containerMargin;\n      top = freespace.y2 - containerMargin - (this.maxWidth / 2 - textBlockSize.width / 2);\n      angle = -90;\n      position = \"left\";\n      this.width = textBlockSize.height;\n      this.height = textBlockSize.width;\n    } else if (this.horizontalAlign === \"right\") {\n      left = freespace.x2 - containerMargin;\n      top = freespace.y1 + containerMargin + (this.maxWidth / 2 - textBlockSize.width / 2);\n      angle = 90;\n      position = \"right\";\n      this.width = textBlockSize.height;\n      this.height = textBlockSize.width;\n    } else if (this.horizontalAlign === \"center\") {\n      top = container.y1 + (container.height / 2 - textBlockSize.height / 2);\n      left = container.x1 + (container.width / 2 - textBlockSize.width / 2);\n      position = \"center\";\n      this.width = textBlockSize.width;\n      this.height = textBlockSize.height;\n    }\n\n    textBlockHorizontalAlign = \"center\";\n  }\n\n  textBlock.x = left;\n  textBlock.y = top;\n  textBlock.angle = angle;\n  textBlock.horizontalAlign = textBlockHorizontalAlign;\n  textBlock.render(true);\n  container.layoutManager.registerSpace(position, {\n    width: this.width + (position === \"left\" || position === \"right\" ? this.margin + containerMargin : 0),\n    height: this.height + (position === \"top\" || position === \"bottom\" ? this.margin + containerMargin : 0)\n  });\n  this.bounds = {\n    x1: left,\n    y1: top,\n    x2: left + this.width,\n    y2: top + this.height\n  };\n  this.ctx.textBaseline = \"top\";\n};\n\nexport default Title;","map":null,"metadata":{},"sourceType":"module"}