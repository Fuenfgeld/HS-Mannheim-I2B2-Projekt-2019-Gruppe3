{"ast":null,"code":"//#region Animator\nimport AnimationHelper from '../helpers/animator';\n\nfunction Animator(chart) {\n  this.chart = chart;\n  this.ctx = this.chart.plotArea.ctx;\n  this.animations = [];\n  this.animationRequestId = null;\n} //Animator.prototype.animate = function (duration, base, dest, source, animationCallback, onComplete) {\n\n\nAnimator.prototype.animate = function (startDelay, duration, animationCallback, onComplete, easingFunction) {\n  var _this = this;\n\n  this.chart.isAnimating = true;\n  easingFunction = easingFunction || AnimationHelper.easing.linear;\n\n  if (animationCallback) {\n    this.animations.push({\n      startTime: new Date().getTime() + (startDelay ? startDelay : 0),\n      duration: duration,\n      animationCallback: animationCallback,\n      onComplete: onComplete\n    });\n  }\n\n  var remainingAnimations = [];\n\n  while (this.animations.length > 0) {\n    var animation = this.animations.shift();\n    var now = new Date().getTime();\n    var fractionComplete = 0; //var fractionComplete = Math.min(((new Date()).getTime() - animation.startTime) / animation.duration, 1);\n\n    if (animation.startTime <= now) {\n      fractionComplete = easingFunction(Math.min(now - animation.startTime, animation.duration), 0, 1, animation.duration); //var fractionComplete = AnimationHelper.easing.easeOutQuad(Math.min(((new Date()).getTime() - animation.startTime), animation.duration), 0, 1, animation.duration);\n\n      fractionComplete = Math.min(fractionComplete, 1);\n      if (isNaN(fractionComplete) || !isFinite(fractionComplete)) fractionComplete = 1;\n    }\n\n    if (fractionComplete < 1) {\n      remainingAnimations.push(animation);\n    }\n\n    animation.animationCallback(fractionComplete);\n    if (fractionComplete >= 1 && animation.onComplete) animation.onComplete();\n  }\n\n  this.animations = remainingAnimations;\n\n  if (this.animations.length > 0) {\n    this.animationRequestId = this.chart.requestAnimFrame.call(window, function () {\n      _this.animate.call(_this);\n    });\n  } else {\n    this.chart.isAnimating = false;\n  }\n};\n\nAnimator.prototype.cancelAllAnimations = function () {\n  this.animations = [];\n\n  if (this.animationRequestId) {\n    this.chart.cancelRequestAnimFrame.call(window, this.animationRequestId);\n  }\n\n  this.animationRequestId = null;\n  this.chart.isAnimating = false;\n};\n\nexport default Animator;","map":null,"metadata":{},"sourceType":"module"}