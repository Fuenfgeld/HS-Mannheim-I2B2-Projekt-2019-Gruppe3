{"ast":null,"code":"import CanvasJSObject from './canvasjs';\nimport { extend, getFontHeightInPixels, trimString, getFontString } from '../helpers/utils';\n\nfunction TextBlock(ctx, options) {\n  TextBlock.base.constructor.call(this, \"TextBlock\", options);\n  this.ctx = ctx;\n  this._isDirty = true;\n  this._wrappedText = null;\n  this._lineHeight = getFontHeightInPixels(this.fontFamily, this.fontSize, this.fontWeight);\n}\n\nextend(TextBlock, CanvasJSObject);\n\nTextBlock.prototype.render = function (preserveContext) {\n  if (preserveContext) this.ctx.save();\n  var font = this.ctx.font;\n  this.ctx.textBaseline = this.textBaseline;\n  var offsetY = 0;\n  if (this._isDirty) this.measureText(this.ctx);\n  this.ctx.translate(this.x, this.y + offsetY);\n\n  if (this.textBaseline === \"middle\") {\n    offsetY = -this._lineHeight / 2;\n  }\n\n  this.ctx.font = this._getFontString();\n  this.ctx.rotate(Math.PI / 180 * this.angle);\n  var textLeft = 0;\n  var textTop = this.padding; //var textTop = this.padding;\n\n  var line = null;\n\n  if (this.borderThickness > 0 && this.borderColor || this.backgroundColor) {\n    this.ctx.roundRect(0, offsetY, this.width, this.height, this.cornerRadius, this.borderThickness, this.backgroundColor, this.borderColor); //if (this.textBaseline === \"middle\") {\n    //\t//textTop += this.fontSize / 2;\n    //\ttextTop += this._lineHeight / 2;\n    //}\n  }\n\n  this.ctx.fillStyle = this.fontColor;\n\n  for (var i = 0; i < this._wrappedText.lines.length; i++) {\n    line = this._wrappedText.lines[i];\n    if (this.horizontalAlign === \"right\") textLeft = this.width - line.width - this.padding;else if (this.horizontalAlign === \"left\") textLeft = this.padding;else if (this.horizontalAlign === \"center\") textLeft = (this.width - this.padding * 2) / 2 - line.width / 2 + this.padding;\n    this.ctx.fillText(line.text, textLeft, textTop);\n    textTop += line.height;\n  }\n\n  this.ctx.font = font;\n  if (preserveContext) this.ctx.restore();\n};\n\nTextBlock.prototype.setText = function (text) {\n  this.text = text;\n  this._isDirty = true;\n  this._wrappedText = null;\n};\n\nTextBlock.prototype.measureText = function () {\n  if (this.maxWidth === null) {\n    throw \"Please set maxWidth and height for TextBlock\";\n  }\n\n  this._wrapText(this.ctx);\n\n  this._isDirty = false;\n  return {\n    width: this.width,\n    height: this.height\n  };\n};\n\nTextBlock.prototype._getLineWithWidth = function (text, width, clipWord) {\n  text = String(text);\n  clipWord = clipWord || false;\n  if (!text) return {\n    text: \"\",\n    width: 0\n  };\n  var textWidth = 0,\n      min = 0,\n      max = text.length - 1,\n      mid = Infinity;\n  this.ctx.font = this._getFontString();\n\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    var tempText = text.substr(0, mid + 1);\n    textWidth = this.ctx.measureText(tempText).width;\n\n    if (textWidth < width) {\n      min = mid + 1;\n    } else if (textWidth > width) {\n      max = mid - 1;\n    } else {\n      break;\n    }\n  } //edge cases\n\n\n  if (textWidth > width && tempText.length > 1) {\n    tempText = tempText.substr(0, tempText.length - 1);\n    textWidth = this.ctx.measureText(tempText).width;\n  }\n\n  var isClipped = true;\n  if (tempText.length === text.length || text[tempText.length] === \" \") isClipped = false;\n\n  if (isClipped) {\n    var resultWords = tempText.split(\" \");\n    if (resultWords.length > 1) resultWords.pop();\n    tempText = resultWords.join(\" \");\n    textWidth = this.ctx.measureText(tempText).width;\n  }\n\n  return {\n    text: tempText,\n    width: textWidth\n  };\n};\n\nTextBlock.prototype._wrapText = function wrapText() {\n  //this.ctx.save();\n  var text = new String(trimString(String(this.text)));\n  var lines = [];\n  var font = this.ctx.font; // Save the current Font\n\n  var height = 0;\n  var width = 0;\n  this.ctx.font = this._getFontString();\n\n  while (text.length > 0) {\n    var maxWidth = this.maxWidth - this.padding * 2;\n    var maxHeight = this.maxHeight - this.padding * 2;\n\n    var line = this._getLineWithWidth(text, maxWidth, false);\n\n    line.height = this._lineHeight;\n    lines.push(line);\n    width = Math.max(width, line.width);\n    height += line.height;\n    text = trimString(text.slice(line.text.length, text.length));\n\n    if (maxHeight && height > maxHeight) {\n      var line = lines.pop();\n      height -= line.height;\n    }\n  }\n\n  this._wrappedText = {\n    lines: lines,\n    width: width,\n    height: height\n  };\n  this.width = width + this.padding * 2;\n  this.height = height + this.padding * 2;\n  this.ctx.font = font; // Restore the font\n};\n\nTextBlock.prototype._getFontString = function () {\n  //return this.fontStyle + \" \" + this.fontWeight + \" \" + this.fontSize + \"px \" + this.fontFamily\n  return getFontString(\"\", this, null);\n};\n\nexport default TextBlock;","map":null,"metadata":{},"sourceType":"module"}